package main

import (
	"flag"
	"fmt"
	"github.com/foundriesio/ostreeuploader/pkg/ostreeuploader"
	"io/ioutil"
	"log"
	"os"
)

var (
	DefaultServerUrl = "https://api.foundries.io/ota/ostreehub"
)

func main() {

	var repoDir string
	ostreeHubUrl := flag.String("server", DefaultServerUrl, "An URL to OSTree Hub to upload repo to")
	srcCreds := flag.String("src-creds", "", "A credential archive with auth material to access a source Factory")
	dstCreds := flag.String("dst-creds", "", "A credential archive with auth material to access a destination Factory")
	srcFactory := flag.String("src-factory", "", "A Factory to sync commit from")
	dstFactory := flag.String("dst-factory", "", "A Factory to sync commit to")
	dir := flag.String("repo-dir", "", "A folder to download a source repo commit to. If not specified a temporal directory is used")
	commit := flag.String("commit", "", "An ostree repo commit to sync")
	corId := flag.String("cor-id", "", "A correlation ID to add to each HTTP request generated by the command")
	flag.Parse()

	if len(*commit) == 0 {
		log.Fatal("an ostree repo commit is not specified")
	}
	var err error
	if *dir == "" {
		repoDir, err = ioutil.TempDir("", "fiosync-repo-*")
		if err != nil {
			log.Fatalf("failed to get a temporal directory for an ostree repo")
		}
	} else {
		repoDir = *dir
	}
	defer func() {
		if *dir == "" {
			err = os.RemoveAll(repoDir)
			if err != nil {
				log.Printf("failed to remove a temporal repo directory: %s\n", err.Error())
			}
		}
	}()

	apiVer := "v2"
	var puller ostreeuploader.Puller
	if *srcCreds != "" {
		puller, err = ostreeuploader.NewPuller(repoDir, *srcCreds, apiVer)
	} else {
		puller, err = ostreeuploader.NewPullerNoAuth(repoDir, *ostreeHubUrl, *srcFactory, apiVer)
	}
	if err != nil {
		log.Fatalf("failed to create Fio Puller: %s", err.Error())
	}

	var pusher ostreeuploader.Pusher
	if *dstCreds != "" {
		pusher, err = ostreeuploader.NewPusher(repoDir, *dstCreds, apiVer)
	} else {
		pusher, err = ostreeuploader.NewPusherNoAuth(repoDir, *ostreeHubUrl, *dstFactory, apiVer)
	}
	if err != nil {
		log.Fatalf("Failed to create Fio Pusher: %s\n", err.Error())
	}

	id := *corId
	if len(id) == 0 {
		id, _ = ostreeuploader.GetUUID()
	}

	fmt.Printf("pulling %s from %s...\n", *commit, puller.Factory())
	err = puller.Pull(*commit, id)
	if err != nil {
		log.Fatalf("failed to pull commit: %s\n", err.Error())
	}

	if err := pusher.Push(id); err != nil {
		log.Fatalf("Failed to run Fio Pusher: %s\n", err.Error())
	}

	log.Printf("Pushing %s to %s, factory: %s, correlation ID: %s ...\n", repoDir, pusher.Url(), pusher.Factory(), id)
	report, err := pusher.Wait()
	if err != nil {
		log.Fatalf("Failed to push repo: %s\n", err.Error())
	}

	log.Printf("Checked: %d\n", report.Checked)
	log.Printf("Sent %d files, %d objects, %d bytes\n", report.Sent.FileNumb, report.Sent.ObjNumb, report.Sent.Bytes)
	log.Printf("Uploaded %d files, synced %d objects, uploaded to GCS %d objects\n",
		report.Synced.UploadedFileNumb, report.Synced.SyncedFileNumb, report.Synced.UploadSyncedFileNumb)
	log.Printf("Failed to sync %d objects", report.Synced.SyncFailedNumb)
}
